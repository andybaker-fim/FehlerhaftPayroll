// <auto-generated />
using System;
using FehlerhaftPayroll.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FehlerhaftPayroll.Data.Migrations
{
    [DbContext(typeof(FehlerhaftPayrollContext))]
    [Migration("20210427105406_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.BankDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SortCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("BankDetails");
                });

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AnnualHolidayAllowance")
                        .HasColumnType("int");

                    b.Property<int>("ContractType")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentId1")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employee_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DepartmentId1");

                    b.ToTable("Employees");

                    b.HasDiscriminator<string>("employee_type").HasValue("Employee");
                });

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.Contractor", b =>
                {
                    b.HasBaseType("FehlerhaftPayroll.Domain.Entities.Employee");

                    b.Property<DateTime>("ContractExpires")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("contractor");
                });

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.FullTimeEmployee", b =>
                {
                    b.HasBaseType("FehlerhaftPayroll.Domain.Entities.Employee");

                    b.HasDiscriminator().HasValue("full-time");
                });

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.PartTimeEmployee", b =>
                {
                    b.HasBaseType("FehlerhaftPayroll.Domain.Entities.Employee");

                    b.HasDiscriminator().HasValue("part-time");
                });

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.BankDetails", b =>
                {
                    b.HasOne("FehlerhaftPayroll.Domain.Entities.Employee", "Employee")
                        .WithOne("BankDetails")
                        .HasForeignKey("FehlerhaftPayroll.Domain.Entities.BankDetails", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.Employee", b =>
                {
                    b.HasOne("FehlerhaftPayroll.Domain.Entities.Department", null)
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("FehlerhaftPayroll.Domain.Entities.Department", null)
                        .WithMany()
                        .HasForeignKey("DepartmentId1");
                });

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("FehlerhaftPayroll.Domain.Entities.Employee", b =>
                {
                    b.Navigation("BankDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
